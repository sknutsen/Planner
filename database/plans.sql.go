// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: plans.sql

package database

import (
	"context"
)

const createPlan = `-- name: CreatePlan :exec
INSERT INTO plans (
    name,
    user
) VALUES (
    ?,
    ?
)
`

type CreatePlanParams struct {
	Name string
	User string
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) error {
	_, err := q.db.ExecContext(ctx, createPlan, arg.Name, arg.User)
	return err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE id IN (SELECT p.id FROM plans as p
             LEFT OUTER JOIN plan_access as pa ON p.id = pa.plan_id
             WHERE p.id = ? AND (p.user = ? OR pa.user = ?))
`

type DeletePlanParams struct {
	ID     int64
	User   string
	User_2 string
}

func (q *Queries) DeletePlan(ctx context.Context, arg DeletePlanParams) error {
	_, err := q.db.ExecContext(ctx, deletePlan, arg.ID, arg.User, arg.User_2)
	return err
}

const getPlan = `-- name: GetPlan :one
SELECT 
id, name, user 
FROM plans
WHERE id IN (SELECT p.id FROM plans as p
             LEFT OUTER JOIN plan_access as pa ON p.id = pa.plan_id
             WHERE p.id = ? AND (p.user = ? OR pa.user = ?))
`

type GetPlanParams struct {
	ID     int64
	User   string
	User_2 string
}

func (q *Queries) GetPlan(ctx context.Context, arg GetPlanParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, getPlan, arg.ID, arg.User, arg.User_2)
	var i Plan
	err := row.Scan(&i.ID, &i.Name, &i.User)
	return i, err
}

const listPlans = `-- name: ListPlans :many
SELECT 
id, name, user 
FROM plans
WHERE id IN (SELECT p.id FROM plans as p
             LEFT OUTER JOIN plan_access as pa ON p.id = pa.plan_id
             WHERE p.user = ? OR pa.user = ?)
`

type ListPlansParams struct {
	User   string
	User_2 string
}

func (q *Queries) ListPlans(ctx context.Context, arg ListPlansParams) ([]Plan, error) {
	rows, err := q.db.QueryContext(ctx, listPlans, arg.User, arg.User_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(&i.ID, &i.Name, &i.User); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlan = `-- name: UpdatePlan :exec
UPDATE plans 
SET name = ?
WHERE id IN (SELECT p.id FROM plans as p
             LEFT OUTER JOIN plan_access as pa ON p.id = pa.plan_id
             WHERE p.id = ? AND (p.user = ? OR pa.user = ?))
`

type UpdatePlanParams struct {
	Name   string
	ID     int64
	User   string
	User_2 string
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) error {
	_, err := q.db.ExecContext(ctx, updatePlan,
		arg.Name,
		arg.ID,
		arg.User,
		arg.User_2,
	)
	return err
}
