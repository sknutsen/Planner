// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: plan_access.sql

package database

import (
	"context"
)

const grantAccess = `-- name: GrantAccess :exec
INSERT INTO plan_access (
    plan_id,
    user
) VALUES (
    ?,
    ?
)
`

type GrantAccessParams struct {
	PlanID int64
	User   string
}

func (q *Queries) GrantAccess(ctx context.Context, arg GrantAccessParams) error {
	_, err := q.db.ExecContext(ctx, grantAccess, arg.PlanID, arg.User)
	return err
}

const listPlanAccess = `-- name: ListPlanAccess :many
SELECT pa.id, pa.plan_id, pa.user FROM plan_access as pa
INNER JOIN plans as p ON pa.plan_id = p.id
WHERE p.id = ? AND p.user = ?
`

type ListPlanAccessParams struct {
	ID   int64
	User string
}

func (q *Queries) ListPlanAccess(ctx context.Context, arg ListPlanAccessParams) ([]PlanAccess, error) {
	rows, err := q.db.QueryContext(ctx, listPlanAccess, arg.ID, arg.User)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlanAccess
	for rows.Next() {
		var i PlanAccess
		if err := rows.Scan(&i.ID, &i.PlanID, &i.User); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAccess = `-- name: RemoveAccess :exec
DELETE FROM plan_access
WHERE user = ?
`

func (q *Queries) RemoveAccess(ctx context.Context, user string) error {
	_, err := q.db.ExecContext(ctx, removeAccess, user)
	return err
}
